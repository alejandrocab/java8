package com.codechallenge.application.controllers;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.codechallenge.application.dto.TransactionDto;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@AutoConfigureMockMvc
public class TestTransactionCreateController {
	
	@Autowired
	private MockMvc mockMvc;
	
	private static final String TRANSACTION_ENDPOINT="/transactions";

	@Test
	public void givenATransactionWithReference_WhenCheckAmountAccountPositive_ThenStatusCreated() throws Exception {
		TransactionDto dto = TransactionDto.builder().reference("REF01").accountIban("ES982138577898300076030").amount(-5.00).fee(0.50).build();
		mockMvc.perform( MockMvcRequestBuilders
			      .post(TRANSACTION_ENDPOINT)
			      .content(asJsonString(dto))
			      .contentType(MediaType.APPLICATION_JSON)
			      .accept(MediaType.APPLICATION_JSON))
				  .andDo(MockMvcResultHandlers.print())
				  .andExpect(status().isCreated());
	}
	
	@Test
	public void givenATransactionWithoutReference_WhenCheckAmountAccountPositive_ThenStatusCreatedAndReferenceAutogenerated() throws Exception {
		TransactionDto dto = TransactionDto.builder().accountIban("ES982138577898300076030").amount(-5.00).amount(-5.00).fee(0.50).build();
		mockMvc.perform( MockMvcRequestBuilders
			      .post(TRANSACTION_ENDPOINT)
			      .content(asJsonString(dto))
			      .contentType(MediaType.APPLICATION_JSON)
			      .accept(MediaType.APPLICATION_JSON))
				  .andDo(MockMvcResultHandlers.print())
				  .andExpect(status().isCreated())
				  .andExpect(MockMvcResultMatchers.jsonPath("$.reference", is(notNullValue())));
	}
	
	@Test
	public void givenATransactionWithAccountIbanNotStored_WhenCheckAccountIban_ThenStatusError() throws Exception {
		TransactionDto dto = TransactionDto.builder().accountIban("XES982138577898300076030").amount(-5.00).amount(-5.00).fee(0.50).build();
		mockMvc.perform( MockMvcRequestBuilders
			      .post(TRANSACTION_ENDPOINT)
			      .content(asJsonString(dto))
			      .contentType(MediaType.APPLICATION_JSON)
			      .accept(MediaType.APPLICATION_JSON))
				  .andDo(MockMvcResultHandlers.print())
				  .andExpect(status().isBadRequest());
	}
	
	@Test
	public void givenATransaction_WhenCheckAmountAccountNegative_ThenStatusError() throws Exception {
		TransactionDto dto = TransactionDto.builder().accountIban("ES982138577898300076030").amount(-50000000000000.00).fee(0.50).build();
		mockMvc.perform( MockMvcRequestBuilders
			      .post(TRANSACTION_ENDPOINT)
			      .content(asJsonString(dto))
			      .contentType(MediaType.APPLICATION_JSON)
			      .accept(MediaType.APPLICATION_JSON))
				  .andDo(MockMvcResultHandlers.print())
				  .andExpect(status().isBadRequest());
	}
	
	public static String asJsonString(final Object obj) {
	    try {
	        return new ObjectMapper().writeValueAsString(obj);
	    } catch (Exception e) {
	        throw new RuntimeException(e);
	    }
	}

}
